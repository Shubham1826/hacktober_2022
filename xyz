#include<bits/stdc++.h>
using namespace std;
int input(vector<int> &h, int n){
    int sum = 0;
 for(int i =0; i < n; i++){
     cin>>h[i];
     sum = sum + h[i];
 }
 reverse(h.begin(),h.end());
 return sum;
}
int equalStacks(vector<int> h1, vector<int> h2, vector<int> h3, int s1, int s2, int s3) {
while( !(s1 == s2 && s2 == s3)){
    int ma_x = max({s1,s2,s3});
if(ma_x == s1 && s1 != s2 && s1!=s3){
    s1 = s1 - h1[h1.size()-1];
    h1.pop_back();
}
if(ma_x == s2 && s2 != s1 && s2 !=s3){
    s2 = s2 - h2[h2.size()-1];
    h2.pop_back();
}
if(ma_x == s3 && s3 != s1 && s3!=s1){
    s3 = s3 - h3[h3.size()-1];
    h3.pop_back();
}
if(ma_x == s1 && s1 == s2 && s1 != s3){
    s1 = s1 - h1[h1.size()-1];
    h1.pop_back();
    s2 = s2 - h2[h2.size()-1];
    h2.pop_back();
}
if(ma_x == s1 && s1 == s3 && s1 != s2){
    s1 = s1 - h1[h1.size()-1];
    h1.pop_back();
    s3 = s3 - h3[h3.size()-1];
    h3.pop_back();
}
if(ma_x == s2 && s3 == s2 && s1 != s3){
   s2 = s2 - h2[h2.size()-1];
   h2.pop_back();
   s3 = s3 - h3[h3.size()-1];
   h3.pop_back();
}
}
return s1;
}  
int main(){
    int n1,n2,n3;
    cin>>n1>>n2>>n3;
    vector<int> h1(n1);
    vector<int> h2(n2);
    vector<int> h3(n3);
    int s1 = input(h1,n1);
    int s2 = input(h2,n2);
    int s3 = input(h3,n3);
    int result = equalStacks(h1, h2, h3, s1, s2, s3);

    cout << result << "\n";

    
}
